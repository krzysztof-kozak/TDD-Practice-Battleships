{"version":3,"file":"index.0362908f0d7c5956ff22.bundle.js","mappings":"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","sources":["webpack://frontend-toolbox/./source/components/gameboard/Gameboard.js","webpack://frontend-toolbox/./source/components/ship/Ship.js","webpack://frontend-toolbox/./source/components/player/Player.js","webpack://frontend-toolbox/./source/components/ui/home_screen/style.module.scss?7ff3","webpack://frontend-toolbox/./source/components/ui/home_screen/HomeScreen.js","webpack://frontend-toolbox/./source/components/ui/board/Board.js","webpack://frontend-toolbox/./source/components/ui/board/style.module.scss?5a39","webpack://frontend-toolbox/./source/components/ui/placement_message/Message.js","webpack://frontend-toolbox/./source/components/ui/placement_message/style.module.scss?3473","webpack://frontend-toolbox/./source/components/game/Game.js","webpack://frontend-toolbox/./source/components/ui/footer/Footer.js","webpack://frontend-toolbox/./source/components/ui/footer/style.module.scss?bcc1","webpack://frontend-toolbox/./source/index.js"],"sourcesContent":["function createGameboard(config = { width: 10, length: 10 }) {\n  const grid = [];\n  const ships = [];\n  let validMoves = grid;\n\n  for (let i = 0; i < config.width; i++) {\n    grid.push([]);\n    for (let j = 0; j < config.length; j++) {\n      grid[i].push({ empty: true, wasShotAt: false, coords: { x: i, y: j } });\n    }\n  }\n\n  const placeShip = (location, ship) => {\n    const { x, y, alignment } = location;\n\n    if (x < 0 || x > config.width || y < 0 || y > config.length) {\n      throw new Error('Invalid coordinates');\n    }\n\n    if (\n      (x + ship.length > config.width && alignment === 'horizontal') ||\n      (y + ship.length > config.length && alignment === 'vertical')\n    ) {\n      throw new Error(\n        'Cannot place ship. The ship is out of gameboard bounds.',\n      );\n    }\n\n    ships.push(ship);\n\n    switch (alignment) {\n      case 'horizontal':\n        for (let i = 0; i < ship.length; i++) {\n          grid[x + i][y] = { ship, part: i, coords: { x: x + i, y } };\n        }\n        break;\n\n      case 'vertical':\n        for (let i = 0; i < ship.length; i++) {\n          grid[x][y + i] = { ship, part: i, coords: { x, y: y + i } };\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const receiveAttack = ({ x, y }) => {\n    if (x < 0 || x > config.width || y < 0 || y > config.length) {\n      throw new Error('Invalid coordinates');\n    }\n\n    if (grid[x][y].empty) {\n      grid[x][y].wasShotAt = true;\n      updateValidMoves();\n      return 'missed';\n    }\n    const { ship, part: hitPart } = grid[x][y];\n    return { ship, hitPart };\n  };\n\n  const getValidMoves = () => validMoves.flat();\n\n  function updateValidMoves() {\n    validMoves = [];\n    grid.forEach((element) =>\n      validMoves.push(\n        element.filter(\n          (cell) =>\n            cell.wasShotAt === false ||\n            cell.ship?.shipParts[cell.part].isHit === false,\n        ),\n      ),\n    );\n  }\n\n  return { placeShip, receiveAttack, grid, ships, getValidMoves };\n}\n\nexport default createGameboard;\n","function createShip(length, shipName = 'ship') {\n  const name = shipName;\n  const shipParts = [];\n\n  let i = 0;\n  while (i < length) {\n    shipParts.push({ isHit: false });\n    i += 1;\n  }\n\n  const hit = (target) => {\n    shipParts[target].isHit = true;\n  };\n\n  const isSunk = () => shipParts.every((part) => part.isHit);\n\n  return {\n    name,\n    length,\n    shipParts,\n    hit,\n    isSunk,\n  };\n}\n\nexport default createShip;\n","function createPlayer(name, config = { isABot: false }) {\n  const attack = (board, coordinates) => {\n    return board.receiveAttack(coordinates);\n  };\n\n  const randomAttack = (validMoves) => {\n    const randomIndex = Math.floor(Math.random() * validMoves.length);\n    return validMoves[randomIndex];\n  };\n\n  return { name, isABot: config.isABot, attack, randomAttack };\n}\n\nexport default createPlayer;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"a2wak9Vsz5y9K9iG78vL\",\"input\":\"rUULCST899ejYuJXcd8o\",\"button\":\"j8LkuUhH9nDqGydn2Fe3\",\"wrapper\":\"s5xzkBqpDl5lJjJj0H6U\"};","import style from './style.module.scss';\n\nconst homeScreen = (function homeScreen() {\n  const getTitle = () => {\n    const title = document.createElement('h1');\n    title.textContent = 'Battleships';\n    title.classList.add(style.title);\n    return title;\n  };\n\n  const getInput = () => {\n    const input = document.createElement('input');\n    input.classList.add(style.input);\n    input.setAttribute('placeHolder', 'Player');\n    return input;\n  };\n\n  const getButton = () => {\n    const button = document.createElement('button');\n    button.classList.add(style.button);\n    button.textContent = 'start';\n    return button;\n  };\n\n  const getWrapper = () => {\n    const div = document.createElement('div');\n    div.classList.add(style.wrapper);\n    return div;\n  };\n\n  const render = (selector) => {\n    const container = document.querySelector(selector);\n    const title = getTitle();\n    const input = getInput();\n    const button = getButton();\n    const wrapper = getWrapper();\n\n    wrapper.appendChild(input);\n    wrapper.appendChild(button);\n\n    container.appendChild(title);\n    container.appendChild(wrapper);\n  };\n\n  return { render };\n})();\n\nexport default homeScreen;\n","import style from './style.module.scss';\n\nconst board = (function board() {\n  const render = (grid) => {\n    const container = document.createElement('div');\n    container.classList.add(style.container);\n\n    const fragment = new DocumentFragment();\n\n    grid.forEach((array, x) => {\n      let y = 0;\n      for (let i = 0; i < array.length; i++) {\n        const cell = document.createElement('div');\n        cell.classList.add(style.cell);\n        cell.dataset.type = 'cell';\n        cell.dataset.x = x;\n        cell.dataset.y = y;\n        fragment.appendChild(cell);\n        y += 1;\n      }\n    });\n\n    container.appendChild(fragment);\n    document.querySelector('body').prepend(container);\n    return container;\n  };\n\n  return { render };\n})();\n\nexport default board;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LwXJm3LvDDDT7lJTdJSE\",\"cell\":\"ctPbNwa8vJ8WmMm8K3CY\"};","import style from './style.module.scss';\n\nconst placementMessage = (function message() {\n  const currentShipInformation = document.createElement('p');\n  currentShipInformation.innerHTML =\n    '<span class=\"player-span-js\"></span>, place your <span class=\"ship-span-js\"></span>';\n  currentShipInformation.classList.add(style.shipInfo);\n\n  const placementModeInformation = document.createElement('p');\n  placementModeInformation.innerHTML = `Press <span class=${style.key}>y</span> to rotate`;\n  placementModeInformation.classList.add(style.placementInfo);\n\n  const render = (referenceNode) => {\n    document.body.insertBefore(currentShipInformation, referenceNode);\n    document.body.insertBefore(placementModeInformation, referenceNode);\n  };\n\n  return { render };\n})();\n\nexport default placementMessage;\n","// extracted by mini-css-extract-plugin\nexport default {\"shipInfo\":\"lRitcC7sfXv6ZoPvHHMn\",\"placementInfo\":\"Vx31x2mGrSnzIf0uS7ml\",\"key\":\"Wj1iwNps4O0YR4Q9BzlY\"};","import { createShip } from '../ship';\nimport { createGameboard } from '../gameboard';\nimport { createPlayer } from '../player';\nimport { homeScreen, board, placementMessage, footer } from '../ui';\nimport style from '../ui/home_screen/style.module.scss';\n\nconst game = (function game() {\n  let title;\n  let wrapper;\n\n  let player;\n  let computer;\n\n  let computerBoard;\n  let computerDOMGrid;\n\n  let playerBoard;\n  let playerDOMGrid;\n\n  let playerShipCount;\n  let computerShipCount;\n\n  const restartGame = () => {\n    playerBoard = null;\n    playerDOMGrid.remove();\n\n    computerBoard = null;\n    computerDOMGrid.remove();\n\n    title.classList.remove('hidden');\n    wrapper.classList.remove('hidden');\n  };\n\n  const startBattle = () => {\n    playerShipCount = playerBoard.ships.length;\n    computerShipCount = computerBoard.ships.length;\n\n    let currentTurn = 'player';\n    const switchTurns = (turn) => (turn === 'player' ? 'computer' : 'player');\n\n    const makeComputerMove = () => {\n      const target = computer.randomAttack(playerBoard.getValidMoves());\n      const hitResult = computer.attack(playerBoard, target.coords);\n\n      if (hitResult === 'missed') {\n        playerDOMGrid.querySelector(\n          `[data-x=\"${target.coords.x}\"][data-y=\"${target.coords.y}\"]`,\n        ).style.backgroundColor = 'hsl(240deg 75% 75%)';\n\n        currentTurn = switchTurns(currentTurn);\n        return;\n      }\n\n      const { ship, hitPart } = hitResult;\n      ship.hit(hitPart);\n\n      playerDOMGrid.querySelector(\n        `[data-x=\"${target.coords.x}\"][data-y=\"${target.coords.y}\"]`,\n      ).style.backgroundColor = 'hsl(0deg 75% 45%)';\n\n      if (ship.isSunk()) {\n        playerShipCount -= 1;\n\n        Swal.fire({\n          title: 'Ship down!',\n          text: `Enemy has sunk your ${ship.name}`,\n          icon: 'warning',\n          confirmButtonColor: '#3085d6',\n          confirmButtonText: 'OK',\n        }).then(() => {\n          if (playerShipCount === 0) {\n            // eslint-disable-next-line no-use-before-define\n            announceWinner('Computer');\n          }\n        });\n      }\n\n      currentTurn = switchTurns(currentTurn);\n    };\n\n    const messages = document.querySelectorAll('body > p');\n    messages.forEach((msg) => msg.remove());\n\n    const handleTurn = (e) => {\n      if (e.target.dataset.type !== 'cell') {\n        return;\n      }\n\n      if (e.target.dataset.clicked) {\n        return;\n      }\n\n      if (currentTurn === 'computer') {\n        return;\n      }\n\n      e.target.dataset.clicked = true;\n\n      const { x, y } = e.target.dataset;\n      const hitResult = player.attack(computerBoard, { x, y });\n\n      if (hitResult === 'missed') {\n        currentTurn = switchTurns(currentTurn);\n        e.target.style.backgroundColor = 'hsl(240deg 75% 75%)';\n        makeComputerMove();\n        return;\n      }\n\n      const { ship, hitPart } = hitResult;\n\n      ship.hit(hitPart);\n      e.target.style.backgroundColor = 'hsl(0deg 75% 45%)';\n\n      if (ship.isSunk()) {\n        computerShipCount -= 1;\n\n        Swal.fire({\n          title: 'Ship down!',\n          text: `You've sunk enemy ${ship.name}`,\n          icon: 'success',\n          confirmButtonColor: '#3085d6',\n          confirmButtonText: 'OK',\n        }).then(() => {\n          if (computerShipCount === 0) {\n            // eslint-disable-next-line no-use-before-define\n            announceWinner('Player');\n          }\n        });\n      }\n\n      currentTurn = switchTurns(currentTurn);\n      makeComputerMove();\n    };\n\n    const announceWinner = (winner) => {\n      computerDOMGrid.removeEventListener('click', handleTurn);\n\n      Swal.fire({\n        title: 'Battle report',\n        text: `${winner} has won the battle!`,\n        icon: 'info',\n        confirmButtonColor: '#3085d6',\n        confirmButtonText: 'Restart',\n      }).then(() => {\n        restartGame();\n      });\n    };\n\n    computerDOMGrid.addEventListener('click', handleTurn);\n  };\n\n  const placeComputerShips = () => {\n    computer = createPlayer('Computer', { isABot: true });\n    computerBoard = createGameboard();\n    computerDOMGrid = board.render(computerBoard.grid);\n\n    const shipsToPlace = [\n      { ship: createShip(5, 'Carrier') },\n      { ship: createShip(4, 'Battleship') },\n      { ship: createShip(3, 'Destroyer') },\n      { ship: createShip(3, 'Submarine') },\n      { ship: createShip(2, 'Patrol Boat') },\n    ];\n\n    const randomPlacements = [\n      [\n        { x: 0, y: 0, alignment: 'vertical' },\n        { x: 4, y: 1, alignment: 'horizontal' },\n        { x: 2, y: 4, alignment: 'horizontal' },\n        { x: 6, y: 7, alignment: 'vertical' },\n        { x: 8, y: 3, alignment: 'vertical' },\n      ],\n      [\n        { x: 5, y: 0, alignment: 'horizontal' },\n        { x: 1, y: 2, alignment: 'horizontal' },\n        { x: 5, y: 4, alignment: 'horizontal' },\n        { x: 1, y: 7, alignment: 'horizontal' },\n        { x: 9, y: 8, alignment: 'vertical' },\n      ],\n      [\n        { x: 0, y: 0, alignment: 'vertical' },\n        { x: 2, y: 2, alignment: 'vertical' },\n        { x: 4, y: 4, alignment: 'vertical' },\n        { x: 6, y: 5, alignment: 'vertical' },\n        { x: 8, y: 1, alignment: 'vertical' },\n      ],\n      [\n        { x: 5, y: 1, alignment: 'horizontal' },\n        { x: 0, y: 3, alignment: 'horizontal' },\n        { x: 7, y: 5, alignment: 'horizontal' },\n        { x: 1, y: 7, alignment: 'horizontal' },\n        { x: 5, y: 4, alignment: 'vertical' },\n      ],\n    ];\n\n    const randomIndex = Math.floor(Math.random() * randomPlacements.length);\n    const placement = randomPlacements[randomIndex];\n\n    shipsToPlace.forEach(({ ship }, index) => {\n      const { x, y, alignment } = placement[index];\n      computerBoard.placeShip({ x, y, alignment }, ship);\n    });\n\n    startBattle();\n  };\n\n  const placePlayerShips = () => {\n    placementMessage.render(playerDOMGrid);\n\n    const playerSpan = document.querySelector('.player-span-js');\n    const shipSpan = document.querySelector('.ship-span-js');\n\n    const shipsToPlace = [\n      { ship: createShip(5, 'Carrier') },\n      { ship: createShip(4, 'Battleship') },\n      { ship: createShip(3, 'Destroyer') },\n      { ship: createShip(3, 'Submarine') },\n      { ship: createShip(2, 'Patrol Boat') },\n    ];\n\n    let currentIndex = 0;\n    const maxIndex = shipsToPlace.length - 1;\n\n    let { ship: currentShip } = shipsToPlace[currentIndex];\n\n    playerSpan.textContent = player.name;\n    shipSpan.textContent = currentShip.name;\n\n    let placementMode = 'vertical';\n\n    const switchPlacementMode = () => {\n      if (placementMode === 'vertical') {\n        return 'horizontal';\n      }\n\n      if (placementMode === 'horizontal') {\n        return 'vertical';\n      }\n\n      throw new Error(\n        `Unexpected placement mode. Expected \"vertical\" or \"horizontal\", but received ${placementMode}`,\n      );\n    };\n\n    const getAxis = (mode, x, y) => {\n      if (mode === 'horizontal') {\n        return x;\n      }\n\n      if (mode === 'vertical') {\n        return y;\n      }\n\n      throw new Error(\n        `Unexpected parameter: \"${mode}\". Expected \"horizontal\" or \"vertical\"`,\n      );\n    };\n\n    const handleMouseOver = (e) => {\n      if (e.target.dataset.type !== 'cell') {\n        return;\n      }\n\n      if (!currentShip) {\n        return;\n      }\n\n      const { x, y } = e.target.dataset;\n      let currentX = parseInt(x, 10);\n      let currentY = parseInt(y, 10);\n\n      const allCells = playerDOMGrid.querySelectorAll('div');\n      const cellsToHighlight = [];\n\n      allCells.forEach((cell) => cell.classList.remove('highlighted'));\n\n      if (10 - currentShip.length >= getAxis(placementMode, x, y)) {\n        let cellToHighlight;\n\n        for (let i = 0; i < currentShip.length; i++) {\n          switch (placementMode) {\n            case 'horizontal':\n              cellToHighlight = document.querySelector(\n                `[data-x=\"${currentX}\"][data-y=\"${y}\"]`,\n              );\n              currentX += 1;\n              break;\n\n            case 'vertical':\n              cellToHighlight = document.querySelector(\n                `[data-x=\"${x}\"][data-y=\"${currentY}\"]`,\n              );\n              currentY += 1;\n              break;\n\n            default:\n              break;\n          }\n          cellsToHighlight.push(cellToHighlight);\n        }\n\n        if (cellsToHighlight.some((cell) => cell.classList.contains('ship'))) {\n          return;\n        }\n        cellsToHighlight.forEach((cell) => cell.classList.add('highlighted'));\n      } else {\n        allCells.forEach((cell) => cell.classList.remove('highlighted'));\n      }\n    };\n\n    const handleClick = (e) => {\n      if (e.target.dataset.type !== 'cell') {\n        return;\n      }\n\n      const { x, y } = e.target.dataset;\n      let currentX = parseInt(x, 10);\n      let currentY = parseInt(y, 10);\n\n      const cellsToPlaceShipOn = [];\n\n      if (10 - currentShip.length < getAxis(placementMode, x, y)) {\n        return;\n      }\n\n      playerBoard.placeShip(\n        { x: parseInt(x, 10), y: parseInt(y, 10), alignment: placementMode },\n        currentShip,\n      );\n\n      for (let i = 0; i < currentShip.length; i++) {\n        let cellToPlaceShipOn;\n\n        switch (placementMode) {\n          case 'horizontal':\n            cellToPlaceShipOn = document.querySelector(\n              `[data-x=\"${currentX}\"][data-y=\"${y}\"]`,\n            );\n            currentX += 1;\n            break;\n\n          case 'vertical':\n            cellToPlaceShipOn = document.querySelector(\n              `[data-x=\"${x}\"][data-y=\"${currentY}\"]`,\n            );\n            currentY += 1;\n            break;\n\n          default:\n            break;\n        }\n\n        cellsToPlaceShipOn.push(cellToPlaceShipOn);\n      }\n\n      const isAValidPlacement = cellsToPlaceShipOn.every(\n        (cell) => !cell.classList.contains('ship'),\n      );\n\n      if (!isAValidPlacement) {\n        return;\n      }\n\n      cellsToPlaceShipOn.forEach((cell) => cell.classList.add('ship'));\n\n      if (currentIndex === maxIndex) {\n        placeComputerShips();\n        // eslint-disable-next-line no-use-before-define\n        removeEventListeners();\n        return;\n      }\n\n      currentIndex += 1;\n      const { ship: newShip } = shipsToPlace[currentIndex];\n      currentShip = newShip;\n\n      shipSpan.textContent = currentShip.name;\n    };\n\n    const handleKeypress = (e) => {\n      if (e.key !== 'y') {\n        return;\n      }\n\n      placementMode = switchPlacementMode();\n    };\n\n    const removeEventListeners = () => {\n      playerDOMGrid.removeEventListener('mouseover', handleMouseOver);\n      playerDOMGrid.removeEventListener('click', handleClick);\n      document.removeEventListener('keypress', handleKeypress);\n    };\n\n    playerDOMGrid.addEventListener('mouseover', handleMouseOver);\n    playerDOMGrid.addEventListener('click', handleClick);\n    document.addEventListener('keypress', handleKeypress);\n  };\n\n  const handleStartGame = () => {\n    const playerName =\n      document.querySelector(`.${style.input}`).value || 'Player';\n    player = createPlayer(playerName);\n\n    playerBoard = createGameboard();\n    playerDOMGrid = board.render(playerBoard.grid);\n\n    title = document.querySelector(`.${style.title}`);\n    wrapper = document.querySelector(`.${style.wrapper}`);\n\n    title.classList.add('hidden');\n    wrapper.classList.add('hidden');\n\n    placePlayerShips();\n  };\n\n  const initialize = () => {\n    homeScreen.render('body');\n    document.body.appendChild(footer());\n\n    const button = document.querySelector(`.${style.button}`);\n    button.addEventListener('click', handleStartGame);\n  };\n\n  return { initialize };\n})();\n\nexport default game;\n","/* <footer><p>Krzysztof Kozak</p><a aria-roledescription=\"github link\" class=\"github-icon\" href=\"https://github.com/krzysztof-kozak/odin-todo-app\" target=\"_blank\"><img src=\"https://img.icons8.com/fluency/24/000000/github.png\"></a></footer> */\n\nimport style from './style.module.scss';\n\nfunction footer() {\n  const footerElement = document.createElement('footer');\n  footerElement.classList.add(style.footer);\n  footerElement.innerHTML = `\n    <p>Krzysztof Kozak</p>\n    <a aria-roledescription=\"github link\" class=\"${style.githubIcon}\" href=\"https://github.com/krzysztof-kozak/TDD-Practice-Battleships\" target=\"_blank\">\n    <img src=\"https://img.icons8.com/fluency/24/000000/github.png\"></a>`;\n\n  return footerElement;\n}\n\nexport default footer;\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"K6ReYglyxmEowfHNoGsM\",\"githubIcon\":\"pCeC22gfTFIQMZEUfANl\"};","import { game } from './components';\n\nimport './css/reset.css';\nimport './css/style.scss';\n\ngame.initialize();\n"],"names":["config","width","length","grid","ships","validMoves","i","push","j","empty","wasShotAt","coords","x","y","placeShip","location","ship","alignment","Error","part","receiveAttack","forEach","element","filter","cell","shipParts","isHit","hitPart","getValidMoves","flat","shipName","name","hit","target","isSunk","every","isABot","attack","board","coordinates","randomAttack","Math","floor","random","selector","container","document","querySelector","title","createElement","textContent","classList","add","style","getTitle","input","setAttribute","getInput","button","getButton","wrapper","div","getWrapper","appendChild","fragment","DocumentFragment","array","dataset","type","prepend","currentShipInformation","innerHTML","placementModeInformation","render","referenceNode","body","insertBefore","player","computer","computerBoard","computerDOMGrid","playerBoard","playerDOMGrid","playerShipCount","computerShipCount","placePlayerShips","placementMessage","playerSpan","shipSpan","shipsToPlace","createShip","currentIndex","maxIndex","currentShip","placementMode","getAxis","mode","handleMouseOver","e","currentX","parseInt","currentY","allCells","querySelectorAll","cellsToHighlight","remove","cellToHighlight","some","contains","handleClick","cellsToPlaceShipOn","cellToPlaceShipOn","createPlayer","createGameboard","randomPlacements","placement","index","currentTurn","switchTurns","turn","makeComputerMove","hitResult","backgroundColor","Swal","fire","text","icon","confirmButtonColor","confirmButtonText","then","announceWinner","msg","handleTurn","clicked","winner","removeEventListener","addEventListener","startBattle","placeComputerShips","removeEventListeners","newShip","handleKeypress","key","switchPlacementMode","handleStartGame","playerName","value","initialize","homeScreen","footerElement","footer","game"],"sourceRoot":""}